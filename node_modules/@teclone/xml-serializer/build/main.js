'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var Serializer = _interopDefault(require('./modules/Serializer.js'));

var XMLSerializer = /*#__PURE__*/function () {
  /**
   *@param {boolean} [preserveWhiteSpace=true] - boolean value indicating if white spaces
   * should be preserved as it is in the source
   */
  function XMLSerializer(preserveWhiteSpace) {
    _classCallCheck(this, XMLSerializer);

    this.serializer = new Serializer(preserveWhiteSpace);
  }
  /**
   * return XMLSerializer as modules name
   */


  _createClass(XMLSerializer, [{
    key: "serializeToString",

    /**
     * produces an XML serialization of root passing a value of false for the
     * require well-formed parameter, and return the result.
     *@param {Node} root - the root node
     *@param {boolean} [requireWellFormed=false] - boolean value indicating if it should require xml
     * well formedness
     *@returns {string}
     */
    value: function serializeToString(root, requireWellFormed) {
      return this.serializer.serializeToString(root, requireWellFormed);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'XMLSerializer';
    }
  }]);

  return XMLSerializer;
}();
/**
 * installs the serialize to the given target object
 */


XMLSerializer.installTo = function (target) {
  target.XMLSerializer = XMLSerializer;
};

module.exports = XMLSerializer;
//# sourceMappingURL=main.js.map
