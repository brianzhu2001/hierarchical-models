{"version":3,"file":"Serializer.js","sources":["../../src/modules/Serializer.js"],"sourcesContent":["import Util from './Util.js';\n\nconst XML_NS = 'http://www.w3.org/XML/1998/namespace',\n  XMLNS_NS = 'http://www.w3.org/2000/xmlns/',\n  HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nexport default class Serializer {\n  /**\n   * creates an xml serializer\n   *@param {boolean} [preserveWhiteSpace=false] - boolean value indicating if it should preserve\n   * white spaces. defaults to false\n   */\n  constructor(preserveWhiteSpace) {\n    this.prefixIndex = 1;\n    this.dupPrefixDef = [];\n    this.preserveWhiteSpace = preserveWhiteSpace === false ? false : true;\n  }\n\n  /**\n   * tests if the given text value is a valid xml name production\n   *@param {string} value - the text value\n   *@returns {boolean}\n   */\n  validateXMLNameProduction(value) {\n    let nameStart =\n        '[a-z]|[:]|[_]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|' +\n        '[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|' +\n        '[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|' +\n        '[\\\\uD800-\\\\uDBFF]|[\\\\uDC00-\\\\uDFFF]',\n      nameChar =\n        nameStart + '|[\\\\-]|[.]|[0-9]|\\\\u00B7|[\\\\u0300-\\\\u036F]|[\\\\u203F-\\\\u2040]';\n\n    let regex = new RegExp(`^(${nameStart})(${nameChar})*`, 'i');\n    return typeof value === 'string' && regex.test(value);\n  }\n\n  /**\n   * tests if the given text value is a valid xml tag name\n   *@param {string} value - the text value\n   *@returns {boolean}\n   */\n  validateXMLTagName(value) {\n    return this.validateXMLNameProduction(value) && !/^xml/i.test(value);\n  }\n\n  /**\n   * tests if the given text value is a valid xml attribute name\n   *@param {string} value - the text value\n   *@param {string} attrNS - attribute namespace value\n   *@returns {boolean}\n   */\n  validateXMLAttrName(value, attrNS) {\n    return (\n      this.validateXMLNameProduction(value) &&\n      (value.toLowerCase() !== 'xmlns' || attrNS !== null)\n    );\n  }\n\n  /**\n   * validates xml char\n   *@param {string} value - char to validate\n   *@returns {boolean}\n   */\n  validateChar(value) {\n    let char =\n      '[\\\\u0009]|[\\\\u000A]|[\\\\u000D]|[\\\\u0020-\\uD7FF]|[\\\\uE000-\\\\uFFFD]|' +\n      '[\\\\uD800-\\\\uDBFF]|[\\\\uDC00-\\\\uDFFF]';\n\n    let regex = new RegExp(`^(${char})*$`);\n    return typeof value === 'string' && regex.test(value);\n  }\n\n  /**\n   * validates xml comment\n   *@param {string} comment - the xml comment\n   *@returns {boolean}\n   */\n  validateComment(comment) {\n    return (\n      this.validateChar(comment) &&\n      comment.indexOf('--') < 0 &&\n      comment.charAt(comment.length - 1) !== '-'\n    );\n  }\n\n  /**\n   * tests if the public id given is valid\n   *@param {string} pubId - the public id\n   *@returns {boolean}\n   */\n  validatePublicId(pubId) {\n    let pubIdChar = \"[\\\\u0020]|[\\\\u000D]|[\\\\u000A]|[a-zA-Z0-9]|[\\\\-\\\\'()+,./:=?;!*#@$_%]\";\n\n    let regex = new RegExp(`^(${pubIdChar})*$`);\n    return typeof pubId === 'string' && regex.test(pubId);\n  }\n\n  /**\n   * tests if the systemId given is valid\n   *@param {string} systemId - the systemId\n   *@returns {boolean}\n   */\n  validateSystemId(systemId) {\n    return this.validateChar(systemId);\n  }\n\n  /**\n   * validates xml processing instruction target value\n   *@param {string} target - the target text\n   *@returns {boolean}\n   */\n  validatePITarget(target) {\n    return (\n      this.validateChar(target) &&\n      target.indexOf(':') < 0 &&\n      target.toLowerCase() !== 'xml'\n    );\n  }\n\n  /**\n   * validates xml processing instruction data value\n   *@param {string} data - the data value\n   *@returns {boolean}\n   */\n  validatePIData(data) {\n    return this.validateChar(data) && data.indexOf('?>') < 0;\n  }\n\n  /**\n   * checks if the given tuple consisting of namespaceURI and localName pair exists in the records\n   *@param {Array} records - tuple records\n   *@param {Array} tuple - the tuple to check\n   *@returns {boolean}\n   */\n  tupleExists(records, tuple) {\n    let exists = false,\n      len = tuple.length;\n    for (let record of records) {\n      if (len === record.length) {\n        exists = true;\n        let i = -1;\n        while (++i < len) {\n          if (record[i] !== tuple[i]) {\n            exists = false;\n            break;\n          }\n        }\n      }\n      if (exists) break;\n    }\n    return exists;\n  }\n\n  /**\n   * generate a element prefix\n   *@param {Map} map - namespace prefix map,\n   *@param {string} ns - the new namespace\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-generate-prefix\n   */\n  generatePrefix(map, ns) {\n    let generatedPrefix = 'ns' + this.prefixIndex++;\n    map[ns] = generatedPrefix;\n\n    return generatedPrefix;\n  }\n\n  /**\n   * records the namespace information for an element\n   *@param {Element} elem - the element node\n   *@param {Map} prefixMap - element prefix to namespace map\n   *@param {Array} elmPrefixList - element current prefix list\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-record-namespace-info\n   */\n  recordElementNSInfo(elem, prefixMap, elmPrefixList) {\n    //STEP 1\n    let defNSAttrValue = null,\n      attributes = elem.attributes,\n      i = -1,\n      len = attributes.length;\n\n    //STEP 2\n    while (++i < len) {\n      //STEP 2. 1, 2\n      let attr = attributes[i],\n        attrNS = attr.namespaceURI,\n        attrPrefix = attr.prefix;\n      //STEP 2.3\n      if (attrNS === XMLNS_NS) {\n        //STEP 2.3.1\n        if (attrPrefix === null) {\n          defNSAttrValue = attr.value;\n          continue;\n        }\n\n        // STEP 2.3.2\n        //STEP 2.3.2.1 & 2.3.2.2\n        let prefixDef = attr.localName,\n          nsDef = attr.value;\n\n        //STEP 2.3.2.3\n        if (typeof prefixMap[nsDef] !== 'undefined' && prefixMap[nsDef] === prefixDef)\n          this.dupPrefixDef.push(prefixDef);\n        //STEP 2.3.2.4 & 2.3.2.5 combined\n        else prefixMap[nsDef] = prefixDef;\n\n        //STEP 2.3.3.6\n        elmPrefixList.push(prefixDef);\n      }\n    }\n    return defNSAttrValue;\n  }\n\n  /**\n   * serializes an attribute value given an attribute value and require well-formed flag\n   *@param {string} value - the attribute value\n   *@param {boolean} requireWellFormed - boolean value indicating if well formedness is a\n   * requirement\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-serialize-attr-value\n   */\n  serializeAttrValue(value, requireWellFormed) {\n    if (requireWellFormed && !this.validateChar(value))\n      throw new Error(value + ' is not a valid attribute value');\n\n    if (value === null) return '';\n\n    return value\n      .replace('\"', '&quot;')\n      .replace('&', '&amp;')\n      .replace('<', '&lt;')\n      .replace('>', '&gt;');\n  }\n\n  /**\n   * produces the XML serialization of the attributes of an element\n   *@param {Element} node - the element node\n   *@param {Map} map - namespace prefix map,\n   *@param {boolean} ignoreNSDefAttr - a boolean ignore namespace definition attribute flag,\n   *@param {string} dupPrefixDef - a duplicate prefix definition value\n   *@param {boolean} requireWellFormed - a boolean require well-formed xml flag\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-serialize-xml-attributes\n   */\n  serializeAttributes(node, map, ignoreNSDefAttr, requireWellFormed) {\n    //STEP 1, 2\n    let result = '',\n      localNameSet = [];\n\n    let attributes = node.attributes,\n      i = -1,\n      len = attributes.length;\n\n    //STEP 3\n    while (++i < len) {\n      let attr = attributes[i],\n        nsURI = attr.namespaceURI,\n        localName = attr.localName,\n        prefix = attr.prefix;\n\n      let tuple = [nsURI, localName];\n      //STEP 3.1\n      /* istanbul ignore if */\n      if (requireWellFormed && this.tupleExists(localNameSet, tuple))\n        throw new Error(\n          'element cannot have two attributes with the same namespaceURI and localName',\n        );\n\n      //STEP 3.2\n      localNameSet.push(tuple);\n\n      //STEP 3. 3, 4\n      let attrNS = nsURI,\n        candidatePrefix = null;\n      //STEP 3.5\n      /* istanbul ignore else */\n      if (attrNS !== null) {\n        //STEP 3.5.1\n        if (\n          attrNS === XMLNS_NS &&\n          ((prefix === null && ignoreNSDefAttr) ||\n            (prefix !== null && this.dupPrefixDef.includes(localName)))\n        ) {\n          continue;\n        } else if (prefix === null) {\n          candidatePrefix = null;\n        }\n\n        //STEP 3.5.2\n        else if (typeof map[attrNS] !== 'undefined') {\n          candidatePrefix = map[attrNS];\n        }\n\n        //STEP 3.5.3\n        else {\n          candidatePrefix = this.generatePrefix(map, attrNS);\n          result += ` xmlns:${candidatePrefix}=\"${this.serializeAttrValue(attrNS)}\"`;\n        }\n      }\n\n      //STEP 3.6\n      result += ' ';\n\n      //STEP 3.7\n      if (candidatePrefix !== null) result += candidatePrefix + ':';\n\n      //STEP 3.8\n      /* istanbul ignore if */\n      if (requireWellFormed && !this.validateXMLAttrName(localName, attrNS))\n        throw new Error(localName + ' is not a valid xml attribute name');\n\n      //STEP 3.9\n      result += `${localName}=\"${this.serializeAttrValue(attr.value)}\"`;\n    }\n\n    //STEP 4\n    return result;\n  }\n\n  /**\n   * serializes processing instruction node\n   *@param {ProcessingInstruction} node - the processing instruction node\n   *@param {boolean} requireWellFormed - boolean value indicating if well formedness is a\n   * requirement\n   *@returns {string}\n   */\n  serializeProcessingInstruction(node, requireWellFormed) {\n    //STEP 1\n    if (requireWellFormed && !this.validatePITarget(node.target))\n      throw new Error(\n        node.target + ' is not a valid processing instruction target value',\n      );\n\n    //STEP 2\n    if (requireWellFormed && !this.validatePIData(node.data))\n      throw new Error(\n        node.data + ' contains invalid processing instruction character values',\n      );\n\n    let target = this.preserveWhiteSpace ? node.target : node.target.trim(),\n      data = this.preserveWhiteSpace ? node.data : node.data.trim();\n    //STEP 4\n    let markup = `<?${target} ${data}?>`;\n\n    //STEP 4\n    return markup;\n  }\n\n  /**\n   * generate document type serialization\n   *@param {DocumentType} docType - the document type node\n   *@param {boolean} requireWellFormed - boolean value indicating if well formedness is a\n   * requirement\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-serialize-doctype\n   */\n  serializeDocumentType(docType, requireWellFormed) {\n    //STEP 1\n    if (requireWellFormed && !this.validatePublicId(docType.publicId))\n      throw new Error(\n        docType.publicId + ' contains invalid xml document pubId character value',\n      );\n\n    //STEP 2\n    if (requireWellFormed && !this.validateSystemId(docType.systemId))\n      throw new Error(\n        docType.systemId + ' contains invalid xml document systemId character value',\n      );\n\n    //STEP 3, 4, 5\n    let markup = '<!DOCTYPE ',\n      publicId = this.preserveWhiteSpace ? docType.publicId : docType.publicId.trim(),\n      systemId = this.preserveWhiteSpace ? docType.systemId : docType.systemId.trim();\n\n    if (publicId === '' && systemId === '' && /^html$/i.test(docType.name))\n      markup += docType.name.toLowerCase();\n    else markup += docType.name;\n\n    //STEP 7\n    if (publicId !== '') markup += ` PUBLIC \"${publicId}\"`;\n\n    //STEP 8\n    if (systemId !== '' && publicId === '') markup += ` SYSTEM`;\n\n    //STEP 9\n    if (systemId !== '') markup += ` \"${systemId}\"`;\n\n    //STEP 10\n    markup += '>';\n\n    return markup;\n  }\n\n  /**\n   * runs the XML serialization algorithm on a document fragment node\n   *@param {DocumentFragment} node - the document fragment node.\n   *@param {string} namespace - context namespace\n   *@param {Map} prefixMap - a namespace prefix map\n   *@param {boolean} requireWellFormed - a require well-formed flag\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-xml-serialization-algorithm\n   */\n  serializeDocumentFragment(node, namespace, prefixMap, requireWellFormed) {\n    let markup = '',\n      childNodes = node.childNodes,\n      len = childNodes.length,\n      i = -1;\n\n    while (++i < len) {\n      markup += this.runSerialization(\n        childNodes[i],\n        namespace,\n        prefixMap,\n        requireWellFormed,\n      );\n    }\n    return markup;\n  }\n\n  /**\n   * produces the XML serialization of a comment node\n   *@param {Text} node - the text node\n   *@param {boolean} requireWellFormed - a boolean require well-formed xml flag\n   *@returns {string}\n   */\n  serializeText(node, requireWellFormed) {\n    if (requireWellFormed && !this.validateChar(node.data))\n      throw new Error(node.data + ' is not a valid xml text data');\n\n    let data = this.preserveWhiteSpace ? node.data : node.data.trim();\n    return data\n      .replace(/\\&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  }\n\n  /**\n   * produces the XML serialization of a comment node\n   *@param {Comment} node - the comment node\n   *@param {boolean} requireWellFormed - a boolean require well-formed xml flag\n   *@returns {string}\n   */\n  serializeComment(node, requireWellFormed) {\n    if (requireWellFormed && !this.validateComment(node.data))\n      throw new Error(node.data + ' is not a valid xml comment data');\n\n    return '<!--' + node.data + '-->';\n  }\n\n  /**\n   * runs the XML serialization algorithm on a document node\n   *@param {Element} node - the element node.\n   *@param {string} namespace - context namespace\n   *@param {Map} prefixMap - a namespace prefix map\n   *@param {boolean} requireWellFormed - a require well-formed flag\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-xml-serialization-algorithm\n   */\n  serializeDocument(node, namespace, prefixMap, requireWellFormed) {\n    if (requireWellFormed && node.documentElement === null)\n      throw new Error('document has no document element root');\n\n    let serializeDocument = `<?xml version=\"1.0\" encoding=\"${node.characterSet}\"?>`;\n\n    let childNodes = node.childNodes,\n      len = childNodes.length,\n      i = -1;\n\n    while (++i < len) {\n      serializeDocument += this.runSerialization(\n        childNodes[i],\n        namespace,\n        prefixMap,\n        requireWellFormed,\n      );\n    }\n    return serializeDocument;\n  }\n\n  /**\n   * runs the XML serialization algorithm on an element node\n   *@param {Element} node - the element node.\n   *@param {string} namespace - context namespace\n   *@param {Map} prefixMap - a namespace prefix map\n   *@param {boolean} requireWellFormed - a require well-formed flag\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-xml-serialization-algorithm\n   */\n  serializeElement(node, namespace, prefixMap, requireWellFormed) {\n    let localName = node.localName; //get element local name\n\n    // STEP 1: if require well formed is true, and local name is not a valid xml tag name, throw error\n    /* istanbul ignore if */\n    if (requireWellFormed && !this.validateXMLTagName(localName))\n      throw new Error(localName + ' is not a valid xml element local name');\n\n    //STEP 2, 3, 4, 5, 6, 7\n    //declare markup, element qualified tag name, skip end tag boolean value, ignore\n    //namespace definition attribute, prefix map copy, element prefix list and\n    //duplicate prefix definition variables\n    let markup = '<',\n      qualifiedName = '',\n      skipEndTag = false,\n      ignoreNSDefAttr = false,\n      map = Object.assign(Object.create(null), prefixMap),\n      elmPrefixList = [];\n\n    //STEP 8\n    this.dupPrefixDef = [];\n\n    //STEP 9:\n    //get local definition namespace, update map copy and add any new element prefixes\n    let localDefNS = this.recordElementNSInfo(\n        node,\n        map,\n        elmPrefixList,\n        this.dupPrefixDef,\n      ),\n      //STEP 10, 11\n      //delcare inherited namespace as parent namespace, and ns as node namespace uri\n      inheritedNS = namespace,\n      ns = node.namespaceURI;\n\n    //STEP 12\n    if (inheritedNS === ns) {\n      //STEP 12.1\n      /* istanbul ignore if */\n      if (localDefNS !== null) ignoreNSDefAttr = true;\n\n      //STEP 12.2\n      /* istanbul ignore if */\n      if (ns === XML_NS) qualifiedName = 'xml:' + localName;\n      //STEP 12.3\n      else qualifiedName = localName;\n\n      //STEP 12.4\n      markup += qualifiedName;\n    }\n\n    //STEP 13\n    else {\n      //STEP 13. 1, 2\n      let prefix = node.prefix,\n        candidatePrefix = typeof map[ns] !== 'undefined' ? map[ns] : null;\n\n      //STEP 13.3\n      /* istanbul ignore else */\n      if (candidatePrefix !== null) {\n        //STEP 13.3.1\n        qualifiedName = candidatePrefix + ':' + localName;\n\n        //STEP 13.3.2\n        /* istanbul ignore if */\n        if (localDefNS !== null) inheritedNS = ns;\n\n        //STEP 13.3.3\n        markup += qualifiedName;\n      }\n\n      //STEP 13.4\n      else if (prefix !== null && localDefNS === null) {\n        //STEP 13.4.1\n        if (elmPrefixList.includes(prefix)) {\n          // it will use the prefixIndex instance variable. as js can't pass values by reference\n          prefix = this.generatePrefix(map, ns);\n        }\n        //STEP 13.4.2\n        else {\n          map[ns] = prefix;\n        }\n\n        //STEP 13.4.3\n        qualifiedName = prefix + ':' + localName;\n        //STEP 13.4.4\n        markup += qualifiedName;\n\n        //STEP 13.4.5. 1, 2, 3, 4, 5, 6\n        markup += ` xmlns:${prefix}=\"${this.serializeAttrValue(ns, requireWellFormed)}\"`;\n      }\n\n      //STEP 13.5\n      else if (localDefNS === null || localDefNS !== ns) {\n        //STEP 13.5. 1, 2, 3\n        ignoreNSDefAttr = true;\n        qualifiedName = localName;\n        inheritedNS = ns;\n\n        //STEP 13.5.4\n        markup += qualifiedName;\n\n        //STEP 13.5.5. 1, 2, 3, 4, 5, 6\n        markup += ` xmlns=\"${this.serializeAttrValue(ns, requireWellFormed)}\"`;\n      }\n\n      //STEP 13.6\n      else {\n        qualifiedName = localName;\n        inheritedNS = ns;\n        markup += qualifiedName;\n      }\n    }\n\n    //STEP 14\n    markup += this.serializeAttributes(node, map, ignoreNSDefAttr, requireWellFormed);\n\n    //STEP 15\n    if (\n      ns === HTML_NS &&\n      !node.hasChildNodes() &&\n      /^(area|base|basefont|bgsound|br|col|embed|frame|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i.test(\n        localName,\n      )\n    ) {\n      markup += ' /';\n      skipEndTag = true;\n    }\n\n    //STEP 16\n    if (ns !== HTML_NS && !node.hasChildNodes()) {\n      markup += '/';\n      skipEndTag = true;\n    }\n\n    //STEP 17\n    markup += '>';\n\n    //STEP 18\n    if (skipEndTag) return markup;\n\n    //STEP 19\n    if (ns === HTML_NS && localName.toLowerCase() === 'template') {\n      markup += this.runSerialization(node.content, inheritedNS, map, requireWellFormed);\n    }\n\n    //STEP 20\n    else {\n      let len = node.childNodes.length,\n        i = -1;\n      while (++i < len) {\n        markup += this.runSerialization(\n          node.childNodes[i],\n          inheritedNS,\n          map,\n          requireWellFormed,\n        );\n      }\n    }\n\n    //STEP 21\n    markup += '</' + qualifiedName + '>';\n\n    return markup;\n  }\n\n  /**\n   * runs the XML serialization algorithm on depending on the node type\n   *@param {Element} node - the element node.\n   *@param {string} contextNamespace - context namespace\n   *@param {Map} namespacePrefixes - a namespace prefix map\n   *@param {boolean} requireWellFormed - a require well-formed flag\n   *@returns {string}\n   *@see https://www.w3.org/TR/DOM-Parsing/#dfn-concept-serialize-xml\n   */\n  runSerialization(node, contextNamespace, namespacePrefixes, requireWellFormed) {\n    if (Util.isElementNode(node))\n      return this.serializeElement(\n        node,\n        contextNamespace,\n        namespacePrefixes,\n        requireWellFormed,\n      );\n\n    if (Util.isDocumentNode(node))\n      return this.serializeDocument(\n        node,\n        contextNamespace,\n        namespacePrefixes,\n        requireWellFormed,\n      );\n\n    if (Util.isCommentNode(node)) return this.serializeComment(node, requireWellFormed);\n\n    if (Util.isTextNode(node)) return this.serializeText(node, requireWellFormed);\n\n    if (Util.isDOMFragmentNode(node))\n      return this.serializeDocumentFragment(\n        node,\n        contextNamespace,\n        namespacePrefixes,\n        requireWellFormed,\n      );\n\n    if (Util.isDocTypeNode(node))\n      return this.serializeDocumentType(node, requireWellFormed);\n\n    return this.serializeProcessingInstruction(node, requireWellFormed);\n  }\n\n  /**\n   * produces an XML serialization of root passing a value of false for the\n   * require well-formed parameter, and return the result.\n   *@see https://www.w3.org/TR/DOM-Parsing/#the-xmlserializer-interface\n   *@param {Node} root - the root node\n   *@param {boolean} [requireWellFormed=false] - boolean value indicating if it should require xml\n   * well formedness\n   *@returns {string}\n   */\n  serializeToString(root, requireWellFormed) {\n    //STEP 1, 2\n    let contextNamespace = null,\n      namespacePrefixes = Object.create(null); //use object.create to help support older browsers\n\n    //STEP 3\n    //initialize the namspace prefix with xml namspace\n    namespacePrefixes[XMLNS_NS] = 'xmlns';\n\n    //STEP 4\n    this.prefixIndex = 1;\n\n    requireWellFormed = requireWellFormed ? true : false;\n\n    return this.runSerialization(\n      root,\n      contextNamespace,\n      namespacePrefixes,\n      requireWellFormed,\n    );\n  }\n}\n"],"names":["XML_NS","XMLNS_NS","HTML_NS","Serializer","preserveWhiteSpace","prefixIndex","dupPrefixDef","value","nameStart","nameChar","regex","RegExp","test","validateXMLNameProduction","attrNS","toLowerCase","char","comment","validateChar","indexOf","charAt","length","pubId","pubIdChar","systemId","target","data","records","tuple","exists","len","record","i","map","ns","generatedPrefix","elem","prefixMap","elmPrefixList","defNSAttrValue","attributes","attr","namespaceURI","attrPrefix","prefix","prefixDef","localName","nsDef","push","requireWellFormed","Error","replace","node","ignoreNSDefAttr","result","localNameSet","nsURI","tupleExists","candidatePrefix","includes","generatePrefix","serializeAttrValue","validateXMLAttrName","validatePITarget","validatePIData","trim","markup","docType","validatePublicId","publicId","validateSystemId","name","namespace","childNodes","runSerialization","validateComment","documentElement","serializeDocument","characterSet","validateXMLTagName","qualifiedName","skipEndTag","Object","assign","create","localDefNS","recordElementNSInfo","inheritedNS","serializeAttributes","hasChildNodes","content","contextNamespace","namespacePrefixes","Util","isElementNode","serializeElement","isDocumentNode","isCommentNode","serializeComment","isTextNode","serializeText","isDOMFragmentNode","serializeDocumentFragment","isDocTypeNode","serializeDocumentType","serializeProcessingInstruction","root"],"mappings":"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"}